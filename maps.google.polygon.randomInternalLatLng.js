// Generated by CoffeeScript 1.6.1
(function() {

  if (!google.maps.Polygon.prototype.Contains) {
    google.maps.Polygon.prototype.Contains = function(point) {
      var i, j, latLngs, oddNodes, x, y;
      j = 0;
      oddNodes = false;
      x = point.lng();
      y = point.lat();
      latLngs = this.latLngs.getArray()[0];
      i = 0;
      while (i < latLngs.length) {
        j++;
        if (j === latLngs.length) {
          j = 0;
        }
        if (((latLngs.getAt(i).lat() < y && latLngs.getAt(j).lat() >= y) || (latLngs.getAt(j).lat() < y && latLngs.getAt(i).lat() >= y)) && (latLngs.getAt(i).lng() + (y - latLngs.getAt(i).lat()) / (latLngs.getAt(j).lat() - latLngs.getAt(i).lat()) * (latLngs.getAt(j).lng() - latLngs.getAt(i).lng()) < x)) {
          oddNodes = !oddNodes;
        }
        i++;
      }
      return oddNodes;
    };
  }

  if (!google.maps.Polygon.prototype.randomInternalLatLng) {
    google.maps.Polygon.prototype.randomInternalLatLng = function() {
      var dx, dy, generatePoint, latLngs, ll, point, x0, xs, y0, ys;
      latLngs = this.latLngs.getArray()[0].b;
      xs = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = latLngs.length; _i < _len; _i++) {
          ll = latLngs[_i];
          _results.push(ll.lb);
        }
        return _results;
      })();
      ys = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = latLngs.length; _i < _len; _i++) {
          ll = latLngs[_i];
          _results.push(ll.mb);
        }
        return _results;
      })();
      x0 = Math.min.apply(null, xs);
      dx = Math.max.apply(null, xs) - x0;
      y0 = Math.min.apply(null, ys);
      dy = Math.max.apply(null, ys) - y0;
      generatePoint = function() {
        var xp, yp;
        xp = Math.random() * dx + x0;
        yp = Math.random() * dy + y0;
        return new google.maps.LatLng(xp, yp);
      };
      point = generatePoint();
      while (!this.Contains(point)) {
        point = generatePoint();
      }
      return point;
    };
  }

}).call(this);
